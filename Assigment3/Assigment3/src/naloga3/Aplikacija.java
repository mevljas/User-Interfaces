/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package naloga3;

import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.DateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Scanner;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author seba
 */
public class Aplikacija extends javax.swing.JFrame {

    /**
     * Creates new form Aplikacija
     */
    boolean inputsLoaded = true;

    public Aplikacija() {
        initComponents();
        setLocale();
        setPosts();
        disableDateText();
        setCars();
        setColors();
        setTowns();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        osebnoZavarovanjeGroup = new javax.swing.ButtonGroup();
        kaskoGroup = new javax.swing.ButtonGroup();
        jfc = new javax.swing.JFileChooser();
        zavarovanec = new javax.swing.JPanel();
        imeLabel = new javax.swing.JLabel();
        imeField = new javax.swing.JTextField();
        priimekLabel = new javax.swing.JLabel();
        priimekField = new javax.swing.JTextField();
        rojstvoLabel = new javax.swing.JLabel();
        datumRojstva = new com.toedter.calendar.JDateChooser();
        ulicaLabel = new javax.swing.JLabel();
        ulicaField = new javax.swing.JTextField();
        postaLabel = new javax.swing.JLabel();
        hisnaLabel = new javax.swing.JLabel();
        hisnaField = new javax.swing.JTextField();
        voznikLabel = new javax.swing.JLabel();
        voznikCheckBox = new javax.swing.JCheckBox();
        postaComboBox = new javax.swing.JComboBox<>();
        krajLabel = new javax.swing.JLabel();
        krajComboBox = new javax.swing.JComboBox<>();
        vozilo = new javax.swing.JPanel();
        znamkaLabel = new javax.swing.JLabel();
        oznakaLabel = new javax.swing.JLabel();
        barvaLabek = new javax.swing.JLabel();
        barvaComboBox = new javax.swing.JComboBox<>();
        gorivoLabel = new javax.swing.JLabel();
        gorivoComboBox = new javax.swing.JComboBox<>();
        mocLabel = new javax.swing.JLabel();
        mocJSpinner = new javax.swing.JSpinner();
        prostorninaLabel = new javax.swing.JLabel();
        prostorninaJSpinner1 = new javax.swing.JSpinner();
        vrstaComboBox1 = new javax.swing.JComboBox<>();
        vrstaLabel1 = new javax.swing.JLabel();
        sedeziJSpinner2 = new javax.swing.JSpinner();
        sedeziLabel1 = new javax.swing.JLabel();
        znamkaComboBox = new javax.swing.JComboBox<>();
        oznakaField = new javax.swing.JTextField();
        registracija = new javax.swing.JPanel();
        datumRegLabel = new javax.swing.JLabel();
        datumRegjDateChooser1 = new com.toedter.calendar.JDateChooser();
        krajRegLabel = new javax.swing.JLabel();
        krajRegComboBox1 = new javax.swing.JComboBox<>();
        oznacbaLabel = new javax.swing.JLabel();
        oznacbaField = new javax.swing.JTextField();
        zavarovanje = new javax.swing.JPanel();
        osnovnoZavarovanjeLabel = new javax.swing.JLabel();
        osebnoAo = new javax.swing.JRadioButton();
        OsebnoAoPlus = new javax.swing.JRadioButton();
        kaskoLabel = new javax.swing.JLabel();
        kaskoPolno = new javax.swing.JRadioButton();
        kaskoOdbito = new javax.swing.JRadioButton();
        kaskoBrez = new javax.swing.JRadioButton();
        dodatnoZavarovanjeLabel = new javax.swing.JLabel();
        zavarovanjeNaParkiriscu = new javax.swing.JCheckBox();
        zavarovanjeProtiKraji = new javax.swing.JCheckBox();
        zavarovanjeToca = new javax.swing.JCheckBox();
        zavarovanjePotnikov = new javax.swing.JCheckBox();
        zavarovanjeTretjeOsebe = new javax.swing.JCheckBox();
        zavarovanjeGum = new javax.swing.JCheckBox();
        zavarovanjeStekel = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        gumbi = new javax.swing.JPanel();
        prekliciButton = new javax.swing.JButton();
        shraniVnos = new javax.swing.JButton();
        ponastaviButton = new javax.swing.JButton();
        statusnaVrstica = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        datotekaMenu = new javax.swing.JMenu();
        uShrani = new javax.swing.JMenuItem();
        dOdpri = new javax.swing.JMenuItem();
        dIzhod = new javax.swing.JMenuItem();
        urediMenu = new javax.swing.JMenu();
        uPonastavi = new javax.swing.JMenuItem();
        uPreklici = new javax.swing.JMenuItem();
        PomocMenu = new javax.swing.JMenu();
        pAvtor = new javax.swing.JMenuItem();
        pNavodila = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aplikacija za zavarovanje avtomobilov");
        setMinimumSize(new java.awt.Dimension(700, 800));

        zavarovanec.setBorder(javax.swing.BorderFactory.createTitledBorder("Podatki o zavarovancu"));
        zavarovanec.setPreferredSize(new java.awt.Dimension(660, 160));

        imeLabel.setText("Ime");

        imeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imeFieldActionPerformed(evt);
            }
        });

        priimekLabel.setText("Priimek");

        rojstvoLabel.setText("Datum rojstva");

        datumRojstva.setForeground(java.awt.Color.blue);
        datumRojstva.setDateFormatString("d.m.yyyy");
        datumRojstva.setInheritsPopupMenu(true);
        datumRojstva.setMaxSelectableDate(new java.util.Date(1588287719000L));

        ulicaLabel.setText("Ulica");

        postaLabel.setText("Poštna številka");
        postaLabel.setPreferredSize(new java.awt.Dimension(31, 17));

        hisnaLabel.setText("Hišna številka");

        hisnaField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hisnaFieldActionPerformed(evt);
            }
        });

        voznikLabel.setText("Mlad voznik");

        voznikCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voznikCheckBoxActionPerformed(evt);
            }
        });

        postaComboBox.setForeground(java.awt.Color.black);
        postaComboBox.setPreferredSize(new java.awt.Dimension(30, 29));
        postaComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postaComboBoxActionPerformed(evt);
            }
        });

        krajLabel.setText("Kraj");

        krajComboBox.setForeground(java.awt.Color.black);
        krajComboBox.setPreferredSize(new java.awt.Dimension(30, 29));
        krajComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                krajComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout zavarovanecLayout = new javax.swing.GroupLayout(zavarovanec);
        zavarovanec.setLayout(zavarovanecLayout);
        zavarovanecLayout.setHorizontalGroup(
            zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zavarovanecLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(voznikLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(priimekLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rojstvoLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imeField)
                    .addComponent(priimekField)
                    .addGroup(zavarovanecLayout.createSequentialGroup()
                        .addComponent(voznikCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                        .addGap(100, 100, 100))
                    .addComponent(datumRojstva, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(117, 117, 117)
                .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(hisnaLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                    .addComponent(krajLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(postaLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ulicaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(krajComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 170, Short.MAX_VALUE)
                    .addComponent(postaComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ulicaField)
                    .addGroup(zavarovanecLayout.createSequentialGroup()
                        .addComponent(hisnaField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        zavarovanecLayout.setVerticalGroup(
            zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zavarovanecLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(zavarovanecLayout.createSequentialGroup()
                        .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(zavarovanecLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(ulicaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                            .addComponent(ulicaField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(zavarovanecLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(hisnaField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, Short.MAX_VALUE))
                            .addGroup(zavarovanecLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(hisnaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(krajLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(krajComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(zavarovanecLayout.createSequentialGroup()
                                .addComponent(postaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(7, 7, 7))
                            .addGroup(zavarovanecLayout.createSequentialGroup()
                                .addComponent(postaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 8, Short.MAX_VALUE))))
                    .addGroup(zavarovanecLayout.createSequentialGroup()
                        .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imeField, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(imeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priimekLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priimekField, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datumRojstva, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(rojstvoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(zavarovanecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(zavarovanecLayout.createSequentialGroup()
                                .addComponent(voznikLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(4, 4, 4))
                            .addComponent(voznikCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        vozilo.setBorder(javax.swing.BorderFactory.createTitledBorder("Podatki o vozilu"));

        znamkaLabel.setText("Znamka");

        oznakaLabel.setText("Oznaka");

        barvaLabek.setText("Barva");

        barvaComboBox.setForeground(java.awt.Color.black);

        gorivoLabel.setText("Gorivo");

        gorivoComboBox.setForeground(java.awt.Color.black);
        gorivoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "P – bencin", "D – dizel", "LPG – naftni plin", "M – mešenica", "O – ostalo" }));

        mocLabel.setText("Moč (kW)");

        mocJSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 350, 1));

        prostorninaLabel.setText("Prostornina (ccm³)");

        prostorninaJSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 11500, 1));

        vrstaComboBox1.setForeground(java.awt.Color.black);
        vrstaComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Motor", "Osebni avto", "Avtobus", "Tovornjak", "Traktor" }));
        vrstaComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vrstaComboBox1ActionPerformed(evt);
            }
        });

        vrstaLabel1.setText("Vrsta vozila");

        sedeziJSpinner2.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));

        sedeziLabel1.setText("Št. sedežev");

        znamkaComboBox.setForeground(java.awt.Color.black);

        oznakaField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oznakaFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout voziloLayout = new javax.swing.GroupLayout(vozilo);
        vozilo.setLayout(voziloLayout);
        voziloLayout.setHorizontalGroup(
            voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(voziloLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(oznakaLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(barvaLabek, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vrstaLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(znamkaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(barvaComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(oznakaField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(znamkaComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vrstaComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(113, 113, 113)
                .addGroup(voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(voziloLayout.createSequentialGroup()
                        .addComponent(prostorninaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addComponent(gorivoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(voziloLayout.createSequentialGroup()
                        .addComponent(sedeziLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(30, 30, 30))
                    .addGroup(voziloLayout.createSequentialGroup()
                        .addComponent(mocLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(30, 30, 30)))
                .addGap(29, 29, 29)
                .addGroup(voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(voziloLayout.createSequentialGroup()
                        .addGroup(voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mocJSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sedeziJSpinner2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(prostorninaJSpinner1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(68, 68, 68))
                    .addGroup(voziloLayout.createSequentialGroup()
                        .addComponent(gorivoComboBox, 0, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        voziloLayout.setVerticalGroup(
            voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(voziloLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(voziloLayout.createSequentialGroup()
                        .addComponent(znamkaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(oznakaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(74, 74, 74))
                    .addGroup(voziloLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(barvaLabek, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(vrstaLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(15, 15, 15))))
            .addGroup(voziloLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(voziloLayout.createSequentialGroup()
                        .addGroup(voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, voziloLayout.createSequentialGroup()
                                .addComponent(gorivoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(96, 96, 96))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, voziloLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(prostorninaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sedeziLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mocLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(voziloLayout.createSequentialGroup()
                        .addGroup(voziloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, voziloLayout.createSequentialGroup()
                                .addComponent(gorivoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(prostorninaJSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sedeziJSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mocJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, voziloLayout.createSequentialGroup()
                                .addComponent(znamkaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(oznakaField, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(barvaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vrstaComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addGap(15, 15, 15))))
        );

        registracija.setBorder(javax.swing.BorderFactory.createTitledBorder("Podatki o registraciji"));

        datumRegLabel.setText("Datum prve reg.");

        datumRegjDateChooser1.setForeground(java.awt.Color.blue);
        datumRegjDateChooser1.setDateFormatString("d.m.yyyy");
        datumRegjDateChooser1.setMaxSelectableDate(new java.util.Date(1588287719000L));

        krajRegLabel.setText("Kraj prve reg.");

        krajRegComboBox1.setForeground(java.awt.Color.black);
        krajRegComboBox1.setPreferredSize(new java.awt.Dimension(30, 29));
        krajRegComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                krajRegComboBox1ActionPerformed(evt);
            }
        });

        oznacbaLabel.setText("Registrska označba");

        oznacbaField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oznacbaFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout registracijaLayout = new javax.swing.GroupLayout(registracija);
        registracija.setLayout(registracijaLayout);
        registracijaLayout.setHorizontalGroup(
            registracijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registracijaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registracijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(krajRegLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(datumRegLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registracijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(datumRegjDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(krajRegComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(105, 105, 105)
                .addComponent(oznacbaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                .addGap(35, 35, 35)
                .addComponent(oznacbaField, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        registracijaLayout.setVerticalGroup(
            registracijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registracijaLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(registracijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datumRegLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(registracijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(oznacbaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(oznacbaField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(datumRegjDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registracijaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(krajRegComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(krajRegLabel))
                .addGap(12, 12, 12))
        );

        zavarovanje.setBorder(javax.swing.BorderFactory.createTitledBorder("Podatki o zavarovanju"));

        osnovnoZavarovanjeLabel.setText("Osnovno zavarovanje");

        osebnoZavarovanjeGroup.add(osebnoAo);
        osebnoAo.setForeground(java.awt.Color.blue);
        osebnoAo.setSelected(true);
        osebnoAo.setText("AO");

        osebnoZavarovanjeGroup.add(OsebnoAoPlus);
        OsebnoAoPlus.setForeground(java.awt.Color.blue);
        OsebnoAoPlus.setText("AO+");

        kaskoLabel.setText("Kasko");

        kaskoGroup.add(kaskoPolno);
        kaskoPolno.setForeground(java.awt.Color.blue);
        kaskoPolno.setText("Polno");
        kaskoPolno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kaskoPolnoActionPerformed(evt);
            }
        });

        kaskoGroup.add(kaskoOdbito);
        kaskoOdbito.setForeground(java.awt.Color.blue);
        kaskoOdbito.setText("Odbitna franšiza");

        kaskoGroup.add(kaskoBrez);
        kaskoBrez.setForeground(java.awt.Color.blue);
        kaskoBrez.setSelected(true);
        kaskoBrez.setText("Brez");

        dodatnoZavarovanjeLabel.setText("Dodatno zavarovanje");

        zavarovanjeNaParkiriscu.setForeground(java.awt.Color.blue);
        zavarovanjeNaParkiriscu.setText("zavaroavnje na parkirišču");
        zavarovanjeNaParkiriscu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zavarovanjeNaParkiriscuActionPerformed(evt);
            }
        });

        zavarovanjeProtiKraji.setForeground(java.awt.Color.blue);
        zavarovanjeProtiKraji.setText("Zavarovanje proti kraji");

        zavarovanjeToca.setForeground(java.awt.Color.blue);
        zavarovanjeToca.setText("Zavarovanje proti toči");

        zavarovanjePotnikov.setForeground(java.awt.Color.blue);
        zavarovanjePotnikov.setText("Zavarovanje potnikov");

        zavarovanjeTretjeOsebe.setForeground(java.awt.Color.blue);
        zavarovanjeTretjeOsebe.setText("Zavarovanje tretje osebe");

        zavarovanjeGum.setForeground(java.awt.Color.blue);
        zavarovanjeGum.setText("Zavarovanje gum");

        zavarovanjeStekel.setForeground(java.awt.Color.blue);
        zavarovanjeStekel.setText("Zavarovanje stekel");

        javax.swing.GroupLayout zavarovanjeLayout = new javax.swing.GroupLayout(zavarovanje);
        zavarovanje.setLayout(zavarovanjeLayout);
        zavarovanjeLayout.setHorizontalGroup(
            zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zavarovanjeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(zavarovanjeLayout.createSequentialGroup()
                        .addComponent(dodatnoZavarovanjeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(28, 28, 28)
                        .addGroup(zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zavarovanjeGum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zavarovanjeStekel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zavarovanjeToca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zavarovanjePotnikov, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zavarovanjeTretjeOsebe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(zavarovanjeLayout.createSequentialGroup()
                                .addComponent(zavarovanjeProtiKraji, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(5, 5, 5))
                            .addComponent(zavarovanjeNaParkiriscu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(62, 62, 62))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, zavarovanjeLayout.createSequentialGroup()
                        .addGroup(zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(zavarovanjeLayout.createSequentialGroup()
                                .addComponent(osnovnoZavarovanjeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(osebnoAo, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OsebnoAoPlus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(48, 48, 48)
                                .addComponent(kaskoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(2, 2, 2)
                                .addComponent(kaskoPolno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kaskoOdbito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kaskoBrez, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(66, 66, 66))))
        );
        zavarovanjeLayout.setVerticalGroup(
            zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(zavarovanjeLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(zavarovanjeLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(osebnoAo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(OsebnoAoPlus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(zavarovanjeLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(kaskoBrez, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kaskoOdbito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kaskoPolno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(kaskoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(zavarovanjeLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(osnovnoZavarovanjeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(zavarovanjeLayout.createSequentialGroup()
                        .addComponent(dodatnoZavarovanjeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addGap(63, 63, 63))
                    .addGroup(zavarovanjeLayout.createSequentialGroup()
                        .addGroup(zavarovanjeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(zavarovanjeLayout.createSequentialGroup()
                                .addComponent(zavarovanjeStekel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(zavarovanjeToca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(zavarovanjeLayout.createSequentialGroup()
                                .addComponent(zavarovanjeTretjeOsebe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(zavarovanjePotnikov, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, zavarovanjeLayout.createSequentialGroup()
                                .addComponent(zavarovanjeNaParkiriscu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(zavarovanjeProtiKraji, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zavarovanjeGum, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        prekliciButton.setMnemonic('r');
        prekliciButton.setText("Prekliči vnos");
        prekliciButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prekliciButtonActionPerformed(evt);
            }
        });

        shraniVnos.setMnemonic('s');
        shraniVnos.setText("Shrani vnos");
        shraniVnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shraniVnosActionPerformed(evt);
            }
        });

        ponastaviButton.setMnemonic('p');
        ponastaviButton.setText("Ponastavi vnos");
        ponastaviButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ponastaviButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gumbiLayout = new javax.swing.GroupLayout(gumbi);
        gumbi.setLayout(gumbiLayout);
        gumbiLayout.setHorizontalGroup(
            gumbiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gumbiLayout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(shraniVnos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(ponastaviButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(prekliciButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(160, 160, 160))
        );
        gumbiLayout.setVerticalGroup(
            gumbiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gumbiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gumbiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shraniVnos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ponastaviButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(prekliciButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        statusnaVrstica.setText("Aplikacija pripavljena na uporabo.");

        jMenuBar1.setMaximumSize(new java.awt.Dimension(120, 32769));
        jMenuBar1.setMinimumSize(new java.awt.Dimension(120, 21));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(100, 21));

        datotekaMenu.setMnemonic('d');
        datotekaMenu.setText("Datoteka");

        uShrani.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        uShrani.setText("Shrani vnos");
        uShrani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uShraniActionPerformed(evt);
            }
        });
        datotekaMenu.add(uShrani);

        dOdpri.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        dOdpri.setMnemonic('o');
        dOdpri.setText("Odpri datoteko");
        dOdpri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dOdpriActionPerformed(evt);
            }
        });
        datotekaMenu.add(dOdpri);

        dIzhod.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        dIzhod.setMnemonic('i');
        dIzhod.setText("Izhod");
        dIzhod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dIzhodActionPerformed(evt);
            }
        });
        datotekaMenu.add(dIzhod);

        jMenuBar1.add(datotekaMenu);

        urediMenu.setMnemonic('u');
        urediMenu.setText("Uredi");

        uPonastavi.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        uPonastavi.setText("Ponastavi vnos");
        uPonastavi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uPonastaviActionPerformed(evt);
            }
        });
        urediMenu.add(uPonastavi);

        uPreklici.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        uPreklici.setText("Prekliči vnos");
        uPreklici.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uPrekliciActionPerformed(evt);
            }
        });
        urediMenu.add(uPreklici);

        jMenuBar1.add(urediMenu);

        PomocMenu.setMnemonic('m');
        PomocMenu.setText("Pomoč");

        pAvtor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        pAvtor.setMnemonic('A');
        pAvtor.setText("Avtor");
        pAvtor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pAvtorActionPerformed(evt);
            }
        });
        PomocMenu.add(pAvtor);

        pNavodila.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        pNavodila.setMnemonic('n');
        pNavodila.setText("Navodila");
        pNavodila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pNavodilaActionPerformed(evt);
            }
        });
        PomocMenu.add(pNavodila);

        jMenuBar1.add(PomocMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusnaVrstica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zavarovanec, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                    .addComponent(vozilo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(zavarovanje, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 656, Short.MAX_VALUE)
                    .addComponent(registracija, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gumbi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(zavarovanec, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(vozilo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(registracija, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(zavarovanje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(gumbi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(statusnaVrstica, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void krajRegComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_krajRegComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_krajRegComboBox1ActionPerformed

    private void krajComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_krajComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_krajComboBoxActionPerformed

    private void postaComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postaComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_postaComboBoxActionPerformed

    private void shraniVnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shraniVnosActionPerformed
        saveData();
    }//GEN-LAST:event_shraniVnosActionPerformed

    private void ponastaviButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ponastaviButtonActionPerformed
        clearInputs();
    }//GEN-LAST:event_ponastaviButtonActionPerformed

    private void prekliciButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prekliciButtonActionPerformed
        izhodCB();
    }//GEN-LAST:event_prekliciButtonActionPerformed

    private void imeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imeFieldActionPerformed

    private void pNavodilaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pNavodilaActionPerformed
        navodila();
    }//GEN-LAST:event_pNavodilaActionPerformed

    private void pAvtorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pAvtorActionPerformed
        if (inputsLoaded) {
            statusnaVrstica.setForeground(Color.BLACK);
            statusnaVrstica.setText("Avtor: Sebastjan Mevlja");
        }
    }//GEN-LAST:event_pAvtorActionPerformed

    private void uPrekliciActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uPrekliciActionPerformed
        izhodCB();
    }//GEN-LAST:event_uPrekliciActionPerformed

    private void uPonastaviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uPonastaviActionPerformed
        clearInputs();
    }//GEN-LAST:event_uPonastaviActionPerformed

    private void dIzhodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dIzhodActionPerformed
        izhodCB();
    }//GEN-LAST:event_dIzhodActionPerformed

    private void dOdpriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dOdpriActionPerformed
        odpriCB();
    }//GEN-LAST:event_dOdpriActionPerformed

    private void uShraniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uShraniActionPerformed
        saveData();
    }//GEN-LAST:event_uShraniActionPerformed

    private void zavarovanjeNaParkiriscuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zavarovanjeNaParkiriscuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zavarovanjeNaParkiriscuActionPerformed

    private void kaskoPolnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kaskoPolnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kaskoPolnoActionPerformed

    private void hisnaFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hisnaFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hisnaFieldActionPerformed

    private void oznakaFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oznakaFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oznakaFieldActionPerformed

    private void vrstaComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vrstaComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vrstaComboBox1ActionPerformed

    private void oznacbaFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oznacbaFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oznacbaFieldActionPerformed

    private void voznikCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voznikCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_voznikCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Aplikacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Aplikacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Aplikacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aplikacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Aplikacija().setVisible(true);
            }
        });
    }

    private void setLocale() {
        //Set calendar language to slovenian.
        Locale locale = new Locale("sl", "SI");
        Locale.setDefault(locale);
        datumRojstva.setLocale(locale);
        datumRegjDateChooser1.setLocale(locale);
    }

    private void navodila() {
        JOptionPane.showMessageDialog(this,
                "Aplikacija omogoča sklepanje avtomobilskih zavarovanj. \n"
                + "Za uspešno prijavo morajo biti pravilno izpolnjena vsa vnosna polja. \n"
                + "Ime in priimek ne smeta vsebovati števil. \n"
                + "Registrska označba je sestavljena iz oznake registracijskega območja (LJ, MB, KR ...),\n"
                + "treh do šestih velikih črk ali kombinacije velikih črk in številk.\n"
                + "Za drugim znakom registrske oznake vsebuje pomišljaj.\n"
                + "Primer: 'KP KL-123'\n"
                + "Ob napačnem vnosu se vnosno polje obravna rdeče in v statusni vrstici se prikaže sporočilo o napaki.\n"
                + "Shranjen vnos lahko v aplikaciji ponovno odprete in urejate.",
                "Navodila",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void setPosts() {
        String fileName = "poste.txt";

        try {
            File file = new File(
                    getClass().getClassLoader().getResource(fileName).getFile()
            );
            Scanner in = new Scanner(file);
            while (in.hasNextLine()) {
                String[] line = in.nextLine().split(" ");
                postaComboBox.addItem(line[0] + " " + line[1]);

            }
            in.close();

        } catch (FileNotFoundException ex) {
            disableInputs();
            statusnaVrstica.setText("* Pozor: Datoteka" + fileName + " ne obstaja.");
        } catch (Exception e) {
            disableInputs();
            statusnaVrstica.setText("* Pozor: Napaka pri nalaganju seznama pošt. Ali datoteka " + fileName + " obstaja?");
        }
    }

    private void disableDateText() {
        JTextFieldDateEditor editor = (JTextFieldDateEditor) datumRojstva.getDateEditor();
        editor.setEditable(false);
        editor = (JTextFieldDateEditor) datumRegjDateChooser1.getDateEditor();
        editor.setEditable(false);
    }

    private void setCars() {
        String fileName = "avtomobili.txt";

        try {
            File file = new File(
                    getClass().getClassLoader().getResource(fileName).getFile()
            );
            Scanner in = new Scanner(file);
            while (in.hasNextLine()) {
                znamkaComboBox.addItem(in.nextLine());

            }
            in.close();

        } catch (FileNotFoundException ex) {
            statusnaVrstica.setText("* Pozor: Datoteka " + fileName + " ne obstaja.");
            disableInputs();
        } catch (Exception e) {
            statusnaVrstica.setText("* Pozor: Napaka pri nalaganju seznama avtomobilskih proizvajalcev. Ali datoteka " + fileName + " obstaja?");
            disableInputs();
        }
    }

    private void setColors() {
        String fileName = "barve.txt";

        try {
            File file = new File(
                    getClass().getClassLoader().getResource(fileName).getFile()
            );
            Scanner in = new Scanner(file);
            while (in.hasNextLine()) {
                barvaComboBox.addItem(in.nextLine());

            }
            in.close();

        } catch (FileNotFoundException ex) {
            statusnaVrstica.setText("* Pozor: Datoteka " + fileName + " ne obstaja.");
            disableInputs();
        } catch (Exception e) {
            statusnaVrstica.setText("* Pozor: Napaka pri nalaganju seznama barv. Ali datoteka " + fileName + " obstaja?");
            disableInputs();
        }
    }

    private void setTowns() {
        String fileName = "kraji.txt";

        try {
            File file = new File(
                    getClass().getClassLoader().getResource(fileName).getFile()
            );
            Scanner in = new Scanner(file);
            while (in.hasNextLine()) {
                String vrstica = in.nextLine();
                krajComboBox.addItem(vrstica);
                krajRegComboBox1.addItem(vrstica);

            }
            in.close();

        } catch (FileNotFoundException ex) {
            disableInputs();
            statusnaVrstica.setText("* Pozor: Datoteka " + fileName + " ne obstaja.");
        } catch (Exception e) {
            disableInputs();
            statusnaVrstica.setText("* Pozor: Napaka pri nalaganju seznama krajev. Ali datoteka " + fileName + " obstaja?");
        }
    }

    private void clearInputs() {
        if (inputsLoaded) {
            Object[] options = {"Da", "Ne"};
            int n = JOptionPane.showOptionDialog(this,
                    "Ste prepričani, da želiti ponastaviti vnos?\n"
                    + "Vsi neshranjeni podatki bodo izgubljeni.",
                    "Opozorilo",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[1]);
            if (n == 0) {
                resetInputs();
            }
        }

    }

    private void resetInputs() {
        resetBorders();
        imeField.setText("");
        priimekField.setText("");
        datumRojstva.setDate(null);
        voznikCheckBox.setSelected(false);
        ulicaField.setText("");
        hisnaField.setText("");
        krajComboBox.setSelectedIndex(0);
        postaComboBox.setSelectedIndex(0);
        znamkaComboBox.setSelectedIndex(0);
        gorivoComboBox.setSelectedIndex(0);
        barvaComboBox.setSelectedIndex(0);
        vrstaComboBox1.setSelectedIndex(0);
        krajRegComboBox1.setSelectedIndex(0);
        oznakaField.setText("");
        mocJSpinner.setValue(1);
        prostorninaJSpinner1.setValue(1);
        sedeziJSpinner2.setValue(1);
        datumRegjDateChooser1.setDate(null);
        oznacbaField.setText("");
        osebnoAo.setSelected(true);
        OsebnoAoPlus.setSelected(false);
        kaskoPolno.setSelected(false);
        kaskoOdbito.setSelected(false);
        kaskoBrez.setSelected(true);
        zavarovanjeStekel.setSelected(false);
        zavarovanjeToca.setSelected(false);
        zavarovanjeGum.setSelected(false);
        zavarovanjeTretjeOsebe.setSelected(false);
        zavarovanjePotnikov.setSelected(false);
        zavarovanjeNaParkiriscu.setSelected(false);
        zavarovanjeProtiKraji.setSelected(false);
        statusnaVrstica.setForeground(Color.BLACK);
        statusnaVrstica.setText("Vnosi uspešno ponastavljeni.");
    }

    private void saveData() {
        if (inputsLoaded && !checkData()) {
            shraniCB();
        };
    }

    private boolean checkData() {
        boolean error = false;
        statusnaVrstica.setForeground(Color.BLACK);
        LineBorder redBorder = new LineBorder(Color.RED, 2);
        Border defaultBorder = new JTextField().getBorder();

        if (imeField.getText().isEmpty()) {
            imeField.setBorder(redBorder);
            imeLabel.setForeground(Color.RED);
            error = true;
        } else {
            imeField.setBorder(defaultBorder);
            imeLabel.setForeground(Color.BLACK);
        }

        if (priimekField.getText().isEmpty()) {
            priimekField.setBorder(redBorder);
            priimekLabel.setForeground(Color.RED);
            error = true;
        } else {
            priimekField.setBorder(defaultBorder);
            priimekLabel.setForeground(Color.BLACK);
        }

        if (ulicaField.getText().isEmpty()) {
            ulicaField.setBorder(redBorder);
            ulicaLabel.setForeground(Color.RED);
            error = true;
        } else {
            ulicaField.setBorder(defaultBorder);
            ulicaLabel.setForeground(Color.BLACK);
        }
        if (hisnaField.getText().isEmpty()) {
            hisnaField.setBorder(redBorder);
            hisnaLabel.setForeground(Color.RED);
            error = true;
        } else {
            hisnaField.setBorder(defaultBorder);
            hisnaLabel.setForeground(Color.BLACK);
        }

        if (datumRojstva.getDate() == null) {
            datumRojstva.setBorder(redBorder);
            rojstvoLabel.setForeground(Color.RED);
            error = true;
        } else {
            datumRojstva.setBorder(null);
            rojstvoLabel.setForeground(Color.BLACK);
        }

        if (oznakaField.getText().isEmpty()) {
            oznakaField.setBorder(redBorder);
            oznakaLabel.setForeground(Color.RED);
            error = true;
        } else {
            oznakaField.setBorder(defaultBorder);
            oznakaLabel.setForeground(Color.BLACK);
        }

        if (datumRegjDateChooser1.getDate() == null) {
            datumRegjDateChooser1.setBorder(redBorder);
            datumRegLabel.setForeground(Color.RED);
            error = true;
        } else {
            datumRegjDateChooser1.setBorder(null);
            datumRegLabel.setForeground(Color.BLACK);
        }

        if (oznacbaField.getText().isEmpty()) {
            oznacbaField.setBorder(redBorder);
            oznacbaLabel.setForeground(Color.RED);
            error = true;
        } else {
            oznacbaField.setBorder(defaultBorder);
            oznacbaLabel.setForeground(Color.BLACK);
        }

        if (error) {
            statusnaVrstica.setForeground(Color.RED);
            statusnaVrstica.setText("* Pozor: Pred shranjevanjem je potrebno izpolniti vsa polja.");
        } else {
            if (checkLicensePlate()) {
                error = true;
                oznacbaField.setBorder(redBorder);
                oznacbaLabel.setForeground(Color.RED);

            } else if (!Pattern.matches("[A-Za-z]+", imeField.getText())) {
                imeField.setBorder(redBorder);
                imeLabel.setForeground(Color.RED);
                statusnaVrstica.setForeground(Color.RED);
                statusnaVrstica.setText("* Pozor: Ime lahko vsebuje le črke.");
                error = true;
            } else if (!Pattern.matches("[A-Za-z]+", priimekField.getText())) {
                priimekField.setBorder(redBorder);
                priimekLabel.setForeground(Color.RED);
                statusnaVrstica.setForeground(Color.RED);
                statusnaVrstica.setText("* Pozor: Priimek lahko vsebuje le črke.");
                error = true;
            } else {
                statusnaVrstica.setText("Aplikacija pripavljena na uporabo.");
                resetBorders();
            }
        }

        return error;

    }

    private void resetBorders() {
        Border defaultBorder = new JTextField().getBorder();
        statusnaVrstica.setForeground(Color.BLACK);
        imeField.setBorder(defaultBorder);
        imeLabel.setForeground(Color.BLACK);
        priimekField.setBorder(defaultBorder);
        priimekLabel.setForeground(Color.BLACK);
        ulicaField.setBorder(defaultBorder);
        ulicaLabel.setForeground(Color.BLACK);
        hisnaField.setBorder(defaultBorder);
        hisnaLabel.setForeground(Color.BLACK);
        datumRojstva.setBorder(null);
        rojstvoLabel.setForeground(Color.BLACK);
        oznakaField.setBorder(defaultBorder);
        oznakaLabel.setForeground(Color.BLACK);
        datumRegjDateChooser1.setBorder(null);
        datumRegLabel.setForeground(Color.BLACK);
        oznacbaField.setBorder(defaultBorder);
        oznacbaLabel.setForeground(Color.BLACK);
    }

    private void disableInputs() {
        inputsLoaded = false;
        statusnaVrstica.setForeground(Color.RED);
        imeField.setEnabled(false);
        priimekField.setEnabled(false);
        datumRojstva.setEnabled(false);
        voznikCheckBox.setEnabled(false);
        ulicaField.setEnabled(false);
        hisnaField.setEnabled(false);
        krajComboBox.setEnabled(false);
        postaComboBox.setEnabled(false);
        znamkaComboBox.setEnabled(false);
        gorivoComboBox.setEnabled(false);
        barvaComboBox.setEnabled(false);
        vrstaComboBox1.setEnabled(false);
        krajRegComboBox1.setEnabled(false);
        oznakaField.setEnabled(false);
        mocJSpinner.setEnabled(false);
        prostorninaJSpinner1.setEnabled(false);
        sedeziJSpinner2.setEnabled(false);
        datumRegjDateChooser1.setEnabled(false);
        oznacbaField.setEnabled(false);
        osebnoAo.setEnabled(false);
        OsebnoAoPlus.setEnabled(false);
        kaskoPolno.setEnabled(false);
        kaskoOdbito.setEnabled(false);
        kaskoBrez.setEnabled(false);
        zavarovanjeStekel.setEnabled(false);
        zavarovanjeToca.setEnabled(false);
        zavarovanjeGum.setEnabled(false);
        zavarovanjeTretjeOsebe.setEnabled(false);
        zavarovanjePotnikov.setEnabled(false);
        zavarovanjeNaParkiriscu.setEnabled(false);
        zavarovanjeProtiKraji.setEnabled(false);
    }

    private boolean checkLicensePlate() {
        String plate = oznacbaField.getText().replace(" ", "");

        statusnaVrstica.setForeground(Color.BLACK);

        if (plate.length() < 6) {
            statusnaVrstica.setForeground(Color.RED);
            statusnaVrstica.setText("* Pozor: Vpisana registrska označba vsebuje premalo znakov.");
            return true;
        }

        String region = plate.substring(0, 2);
        String firstPart = plate.substring(2, 4);
        String dash = plate.substring(4, 5);
        String secondPart = plate.substring(5, plate.length());

        if (firstPart.length() != 2 || secondPart.length() < 3 || secondPart.length() > 6) {
            statusnaVrstica.setForeground(Color.RED);
            statusnaVrstica.setText("* Pozor: Vpisana registrska označba vsebuje napačno število znakov.");
            return true;
        }

        if (!region.equals("CE") && !region.equals("GO") && !region.equals("KK")
                && !region.equals("KR") && !region.equals("LJ") && !region.equals("MB")
                && !region.equals("MS") && !region.equals("NM") && !region.equals("PO")
                && !region.equals("SG") && !region.equals("KP")) {
            statusnaVrstica.setForeground(Color.RED);
            statusnaVrstica.setText("* Pozor: Vpisana registrska označba ne vsebuje pravilnega registracijskega območja.");
            return true;
        }
        if (!dash.equals("-")) {
            statusnaVrstica.setForeground(Color.RED);
            statusnaVrstica.setText("* Pozor: Vpisana registrska označba ne vsebuje pomišlaja na pravem mestu.");
            return true;
        }

        if (!Pattern.matches("[A-Z0-9]+", firstPart) || !Pattern.matches("[A-Z0-9]+", secondPart)) {
            statusnaVrstica.setForeground(Color.RED);
            statusnaVrstica.setText("* Pozor: Vpisana registrska označba vsebuje nedovoljene znake.");
            return true;
        }

        return false;
    }

    private void odpriCB() {

        if (inputsLoaded) {
            if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File f = jfc.getSelectedFile();

                JSONParser jsonParser = new JSONParser();

                try (FileReader reader = new FileReader(f)) {

                    Object obj = jsonParser.parse(new FileReader(f));

                    JSONObject jsonObject = (JSONObject) obj;

                    Locale loc = new Locale("sl", "SI");
                    DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.DEFAULT, loc);

                    imeField.setText((String) jsonObject.get("ime"));
                    priimekField.setText((String) jsonObject.get("priimek"));
                    ulicaField.setText((String) jsonObject.get("ulica"));
                    hisnaField.setText((String) jsonObject.get("hisna"));

                    String datum = (String) jsonObject.get("datumRoj");
                    Date date = dateFormat.parse(datum);
                    datumRojstva.setDate(date);
                    krajComboBox.setSelectedItem(jsonObject.get("kraj"));
                    postaComboBox.setSelectedItem(jsonObject.get("postna"));
                    znamkaComboBox.setSelectedItem(jsonObject.get("znamka"));
                    gorivoComboBox.setSelectedItem(jsonObject.get("gorivo"));
                    barvaComboBox.setSelectedItem(jsonObject.get("barva"));
                    vrstaComboBox1.setSelectedItem(jsonObject.get("vrsta"));
                    voznikCheckBox.setSelected((Boolean) jsonObject.get("voznik"));
                    oznakaField.setText((String) jsonObject.get("oznaka"));
                    mocJSpinner.setValue(jsonObject.get("moc"));
                    sedeziJSpinner2.setValue(jsonObject.get("sedezi"));
                    prostorninaJSpinner1.setValue(jsonObject.get("prostornina"));
                    datum = (String) jsonObject.get("datumReg");
                    date = dateFormat.parse(datum);
                    datumRegjDateChooser1.setDate(date);
                    krajRegComboBox1.setSelectedItem(jsonObject.get("krajReg"));
                    oznacbaField.setText((String) jsonObject.get("oznacba"));
                    OsebnoAoPlus.setSelected((Boolean) jsonObject.get("aoPlus"));
                    kaskoPolno.setSelected((Boolean) jsonObject.get("kaskoPolno"));
                    kaskoOdbito.setSelected((Boolean) jsonObject.get("kaskoOdbito"));
                    kaskoBrez.setSelected((Boolean) jsonObject.get("kaskoBrez"));
                    zavarovanjeStekel.setSelected((Boolean) jsonObject.get("zavarovanjeStekel"));
                    zavarovanjeToca.setSelected((Boolean) jsonObject.get("zavarovanjetoca"));
                    zavarovanjeGum.setSelected((Boolean) jsonObject.get("zavarovanjeGum"));
                    zavarovanjeTretjeOsebe.setSelected((Boolean) jsonObject.get("zavarovanjeTretjaOseba"));
                    zavarovanjePotnikov.setSelected((Boolean) jsonObject.get("zavarovanjePotnikov"));
                    zavarovanjeNaParkiriscu.setSelected((Boolean) jsonObject.get("zavarovanjeParkirisce"));
                    zavarovanjeProtiKraji.setSelected((Boolean) jsonObject.get("zavarovanjeKraja"));
                    resetBorders();
                    statusnaVrstica.setForeground(Color.BLACK);
                    statusnaVrstica.setText("Podatki uspešno naloženi. Naložena datoteka: " + f.getName() + ".");
                } catch (Exception e) {
                    resetInputs();
                    statusnaVrstica.setForeground(Color.RED);
                    statusnaVrstica.setText("* Pozor: Napaka pri branju datoteke: " + f.getName() + ". Ali je format pravilen?");

                }

            } else {
                statusnaVrstica.setForeground(Color.BLACK);
                statusnaVrstica.setText("Odpiranje datoteke preklicano.");
            }
        }

    }

    private void shraniCB() {
        if (inputsLoaded) {
            if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File f = jfc.getSelectedFile();
                JSONObject obj = new JSONObject();
                Locale loc = new Locale("sl", "SI");
                DateFormat df = DateFormat.getDateInstance(DateFormat.DEFAULT, loc);
                obj.put("ime", imeField.getText());
                obj.put("priimek", priimekField.getText());
                obj.put("ulica", ulicaField.getText());
                obj.put("hisna", hisnaField.getText());
                obj.put("datumRoj", df.format(datumRojstva.getDate()));
                obj.put("kraj", krajComboBox.getSelectedItem());
                obj.put("postna", postaComboBox.getSelectedItem());
                obj.put("voznik", voznikCheckBox.isSelected());
                obj.put("znamka", znamkaComboBox.getSelectedItem());
                obj.put("gorivo", gorivoComboBox.getSelectedItem());
                obj.put("oznaka", oznakaField.getText());
                obj.put("barva", barvaComboBox.getSelectedItem());
                obj.put("vrsta", vrstaComboBox1.getSelectedItem());
                obj.put("moc", mocJSpinner.getValue());
                obj.put("sedezi", sedeziJSpinner2.getValue());
                obj.put("prostornina", prostorninaJSpinner1.getValue());
                obj.put("datumReg", df.format(datumRegjDateChooser1.getDate()));
                obj.put("krajReg", krajRegComboBox1.getSelectedItem());
                obj.put("oznacba", oznacbaField.getText());
                obj.put("ao", osebnoAo.isSelected());
                obj.put("aoPlus", OsebnoAoPlus.isSelected());
                obj.put("kaskoPolno", kaskoPolno.isSelected());
                obj.put("kaskoOdbito", kaskoOdbito.isSelected());
                obj.put("kaskoBrez", kaskoBrez.isSelected());
                obj.put("zavarovanjeStekel", zavarovanjeStekel.isSelected());
                obj.put("zavarovanjetoca", zavarovanjeToca.isSelected());
                obj.put("zavarovanjeGum", zavarovanjeGum.isSelected());
                obj.put("zavarovanjeTretjaOseba", zavarovanjeTretjeOsebe.isSelected());
                obj.put("zavarovanjePotnikov", zavarovanjePotnikov.isSelected());
                obj.put("zavarovanjeParkirisce", zavarovanjeNaParkiriscu.isSelected());
                obj.put("zavarovanjeKraja", zavarovanjeProtiKraji.isSelected());

                try (FileWriter fileWriter = new FileWriter(f)) {
                    fileWriter.write(obj.toJSONString());
                    statusnaVrstica.setForeground(Color.BLACK);
                    statusnaVrstica.setText("Podatki uspešno shranjeni. Shranjena datoteka: " + f.getName() + ".");
                } catch (Exception e) {
                    statusnaVrstica.setForeground(Color.RED);
                    statusnaVrstica.setText("* Pozor: Napaka pri shranjevanju nastavitev.");
                }

            } else {
                statusnaVrstica.setForeground(Color.BLACK);
                statusnaVrstica.setText("Shranjevanje datoteke preklicano.");
            }
        }

    }

    private void izhodCB() {
        Object[] options = {"Da", "Ne"};
        int n = JOptionPane.showOptionDialog(this,
                "Ste prepričani, da želiti končati aplikacijo?\n"
                + "Vsi neshranjeni podatki bodo izgubljeni.",
                "Opozorilo",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);
        if (n == 0) {
            System.exit(0);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OsebnoAoPlus;
    private javax.swing.JMenu PomocMenu;
    private javax.swing.JComboBox<String> barvaComboBox;
    private javax.swing.JLabel barvaLabek;
    private javax.swing.JMenuItem dIzhod;
    private javax.swing.JMenuItem dOdpri;
    private javax.swing.JMenu datotekaMenu;
    private javax.swing.JLabel datumRegLabel;
    private com.toedter.calendar.JDateChooser datumRegjDateChooser1;
    private com.toedter.calendar.JDateChooser datumRojstva;
    private javax.swing.JLabel dodatnoZavarovanjeLabel;
    private javax.swing.JComboBox<String> gorivoComboBox;
    private javax.swing.JLabel gorivoLabel;
    private javax.swing.JPanel gumbi;
    private javax.swing.JTextField hisnaField;
    private javax.swing.JLabel hisnaLabel;
    private javax.swing.JTextField imeField;
    private javax.swing.JLabel imeLabel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JFileChooser jfc;
    private javax.swing.JRadioButton kaskoBrez;
    private javax.swing.ButtonGroup kaskoGroup;
    private javax.swing.JLabel kaskoLabel;
    private javax.swing.JRadioButton kaskoOdbito;
    private javax.swing.JRadioButton kaskoPolno;
    private javax.swing.JComboBox<String> krajComboBox;
    private javax.swing.JLabel krajLabel;
    private javax.swing.JComboBox<String> krajRegComboBox1;
    private javax.swing.JLabel krajRegLabel;
    private javax.swing.JSpinner mocJSpinner;
    private javax.swing.JLabel mocLabel;
    private javax.swing.JRadioButton osebnoAo;
    private javax.swing.ButtonGroup osebnoZavarovanjeGroup;
    private javax.swing.JLabel osnovnoZavarovanjeLabel;
    private javax.swing.JTextField oznacbaField;
    private javax.swing.JLabel oznacbaLabel;
    private javax.swing.JTextField oznakaField;
    private javax.swing.JLabel oznakaLabel;
    private javax.swing.JMenuItem pAvtor;
    private javax.swing.JMenuItem pNavodila;
    private javax.swing.JButton ponastaviButton;
    private javax.swing.JComboBox<String> postaComboBox;
    private javax.swing.JLabel postaLabel;
    private javax.swing.JButton prekliciButton;
    private javax.swing.JTextField priimekField;
    private javax.swing.JLabel priimekLabel;
    private javax.swing.JSpinner prostorninaJSpinner1;
    private javax.swing.JLabel prostorninaLabel;
    private javax.swing.JPanel registracija;
    private javax.swing.JLabel rojstvoLabel;
    private javax.swing.JSpinner sedeziJSpinner2;
    private javax.swing.JLabel sedeziLabel1;
    private javax.swing.JButton shraniVnos;
    private javax.swing.JLabel statusnaVrstica;
    private javax.swing.JMenuItem uPonastavi;
    private javax.swing.JMenuItem uPreklici;
    private javax.swing.JMenuItem uShrani;
    private javax.swing.JTextField ulicaField;
    private javax.swing.JLabel ulicaLabel;
    private javax.swing.JMenu urediMenu;
    private javax.swing.JPanel vozilo;
    private javax.swing.JCheckBox voznikCheckBox;
    private javax.swing.JLabel voznikLabel;
    private javax.swing.JComboBox<String> vrstaComboBox1;
    private javax.swing.JLabel vrstaLabel1;
    private javax.swing.JPanel zavarovanec;
    private javax.swing.JPanel zavarovanje;
    private javax.swing.JCheckBox zavarovanjeGum;
    private javax.swing.JCheckBox zavarovanjeNaParkiriscu;
    private javax.swing.JCheckBox zavarovanjePotnikov;
    private javax.swing.JCheckBox zavarovanjeProtiKraji;
    private javax.swing.JCheckBox zavarovanjeStekel;
    private javax.swing.JCheckBox zavarovanjeToca;
    private javax.swing.JCheckBox zavarovanjeTretjeOsebe;
    private javax.swing.JComboBox<String> znamkaComboBox;
    private javax.swing.JLabel znamkaLabel;
    // End of variables declaration//GEN-END:variables
}
